/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.13-206
 *
 */
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';



export async function nifti_proximity_filter(client, node, service_id, dataIn, current_lat, current_long, distance, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (seq
           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
           (call %init_peer_id% ("getDataSrv" "node") [] node)
          )
          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
         )
         (call %init_peer_id% ("getDataSrv" "dataIn") [] dataIn)
        )
        (call %init_peer_id% ("getDataSrv" "current_lat") [] current_lat)
       )
       (call %init_peer_id% ("getDataSrv" "current_long") [] current_long)
      )
      (call %init_peer_id% ("getDataSrv" "distance") [] distance)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call node (service_id "proximity_filter") [dataIn current_lat current_long distance] $res)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'node', () => {return node;});
h.on('getDataSrv', 'service_id', () => {return service_id;});
h.on('getDataSrv', 'dataIn', () => {return dataIn;});
h.on('getDataSrv', 'current_lat', () => {return current_lat;});
h.on('getDataSrv', 'current_long', () => {return current_long;});
h.on('getDataSrv', 'distance', () => {return distance;});
                h.onEvent('callbackSrv', 'response', (args) => {
   let opt = args;

 return resolve(opt);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for nifti_proximity_filter');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return promise;
}
      